// Code generated by MockGen. DO NOT EDIT.
// Source: domain/person.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	domain "github.com/LayssonENS/go-genealogy-api/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockPersonUseCase is a mock of PersonUseCase interface.
type MockPersonUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPersonUseCaseMockRecorder
}

// MockPersonUseCaseMockRecorder is the mock recorder for MockPersonUseCase.
type MockPersonUseCaseMockRecorder struct {
	mock *MockPersonUseCase
}

// NewMockPersonUseCase creates a new mock instance.
func NewMockPersonUseCase(ctrl *gomock.Controller) *MockPersonUseCase {
	mock := &MockPersonUseCase{ctrl: ctrl}
	mock.recorder = &MockPersonUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonUseCase) EXPECT() *MockPersonUseCaseMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockPersonUseCase) CreatePerson(person domain.PersonRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", person)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockPersonUseCaseMockRecorder) CreatePerson(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockPersonUseCase)(nil).CreatePerson), person)
}

// GetAllPerson mocks base method.
func (m *MockPersonUseCase) GetAllPerson() ([]domain.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPerson")
	ret0, _ := ret[0].([]domain.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPerson indicates an expected call of GetAllPerson.
func (mr *MockPersonUseCaseMockRecorder) GetAllPerson() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPerson", reflect.TypeOf((*MockPersonUseCase)(nil).GetAllPerson))
}

// GetByID mocks base method.
func (m *MockPersonUseCase) GetByID(id int64) (domain.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(domain.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPersonUseCaseMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPersonUseCase)(nil).GetByID), id)
}

// MockPersonRepository is a mock of PersonRepository interface.
type MockPersonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPersonRepositoryMockRecorder
}

// MockPersonRepositoryMockRecorder is the mock recorder for MockPersonRepository.
type MockPersonRepositoryMockRecorder struct {
	mock *MockPersonRepository
}

// NewMockPersonRepository creates a new mock instance.
func NewMockPersonRepository(ctrl *gomock.Controller) *MockPersonRepository {
	mock := &MockPersonRepository{ctrl: ctrl}
	mock.recorder = &MockPersonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonRepository) EXPECT() *MockPersonRepositoryMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockPersonRepository) CreatePerson(person domain.PersonRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", person)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockPersonRepositoryMockRecorder) CreatePerson(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockPersonRepository)(nil).CreatePerson), person)
}

// GetAllPerson mocks base method.
func (m *MockPersonRepository) GetAllPerson() ([]domain.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPerson")
	ret0, _ := ret[0].([]domain.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPerson indicates an expected call of GetAllPerson.
func (mr *MockPersonRepositoryMockRecorder) GetAllPerson() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPerson", reflect.TypeOf((*MockPersonRepository)(nil).GetAllPerson))
}

// GetByID mocks base method.
func (m *MockPersonRepository) GetByID(id int64) (domain.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(domain.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPersonRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPersonRepository)(nil).GetByID), id)
}
